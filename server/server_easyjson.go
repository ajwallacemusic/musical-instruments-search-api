// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package server

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson22b57fa5DecodeGithubComAjwallacemusicMusicalInstrumentsSearchApi(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "took":
			out.Took = string(in.String())
		case "hits":
			out.Hits = string(in.String())
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]MusicalInstrument, 0, 0)
					} else {
						out.Results = []MusicalInstrument{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v1 MusicalInstrument
					(v1).UnmarshalEasyJSON(in)
					out.Results = append(out.Results, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b57fa5EncodeGithubComAjwallacemusicMusicalInstrumentsSearchApi(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Took != "" {
		const prefix string = ",\"took\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Took))
	}
	if in.Hits != "" {
		const prefix string = ",\"hits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hits))
	}
	if len(in.Results) != 0 {
		const prefix string = ",\"results\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Results {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson22b57fa5EncodeGithubComAjwallacemusicMusicalInstrumentsSearchApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson22b57fa5EncodeGithubComAjwallacemusicMusicalInstrumentsSearchApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b57fa5DecodeGithubComAjwallacemusicMusicalInstrumentsSearchApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b57fa5DecodeGithubComAjwallacemusicMusicalInstrumentsSearchApi(l, v)
}
func easyjson22b57fa5DecodeGithubComAjwallacemusicMusicalInstrumentsSearchApi1(in *jlexer.Lexer, out *QueryBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "search":
			out.Search = string(in.String())
		case "filters":
			(out.Filters).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b57fa5EncodeGithubComAjwallacemusicMusicalInstrumentsSearchApi1(out *jwriter.Writer, in QueryBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Search != "" {
		const prefix string = ",\"search\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Search))
	}
	if true {
		const prefix string = ",\"filters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Filters).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson22b57fa5EncodeGithubComAjwallacemusicMusicalInstrumentsSearchApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueryBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson22b57fa5EncodeGithubComAjwallacemusicMusicalInstrumentsSearchApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b57fa5DecodeGithubComAjwallacemusicMusicalInstrumentsSearchApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueryBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b57fa5DecodeGithubComAjwallacemusicMusicalInstrumentsSearchApi1(l, v)
}
func easyjson22b57fa5DecodeGithubComAjwallacemusicMusicalInstrumentsSearchApi2(in *jlexer.Lexer, out *MusicalInstrument) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "make":
			out.Make = string(in.String())
		case "model":
			out.Model = string(in.String())
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]string, 0, 4)
					} else {
						out.Genres = []string{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Genres = append(out.Genres, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]Category, 0, 1)
					} else {
						out.Categories = []Category{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v5 Category
					(v5).UnmarshalEasyJSON(in)
					out.Categories = append(out.Categories, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b57fa5EncodeGithubComAjwallacemusicMusicalInstrumentsSearchApi2(out *jwriter.Writer, in MusicalInstrument) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Make != "" {
		const prefix string = ",\"make\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Make))
	}
	if in.Model != "" {
		const prefix string = ",\"model\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Model))
	}
	if len(in.Genres) != 0 {
		const prefix string = ",\"genres\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Genres {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if len(in.Categories) != 0 {
		const prefix string = ",\"categories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Categories {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MusicalInstrument) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson22b57fa5EncodeGithubComAjwallacemusicMusicalInstrumentsSearchApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MusicalInstrument) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson22b57fa5EncodeGithubComAjwallacemusicMusicalInstrumentsSearchApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MusicalInstrument) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b57fa5DecodeGithubComAjwallacemusicMusicalInstrumentsSearchApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MusicalInstrument) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b57fa5DecodeGithubComAjwallacemusicMusicalInstrumentsSearchApi2(l, v)
}
func easyjson22b57fa5DecodeGithubComAjwallacemusicMusicalInstrumentsSearchApi3(in *jlexer.Lexer, out *Category) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "category_name":
			out.CategoryName = string(in.String())
		case "sub_categories":
			if in.IsNull() {
				in.Skip()
				out.SubCategories = nil
			} else {
				in.Delim('[')
				if out.SubCategories == nil {
					if !in.IsDelim(']') {
						out.SubCategories = make([]string, 0, 4)
					} else {
						out.SubCategories = []string{}
					}
				} else {
					out.SubCategories = (out.SubCategories)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.SubCategories = append(out.SubCategories, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b57fa5EncodeGithubComAjwallacemusicMusicalInstrumentsSearchApi3(out *jwriter.Writer, in Category) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CategoryName != "" {
		const prefix string = ",\"category_name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.CategoryName))
	}
	if len(in.SubCategories) != 0 {
		const prefix string = ",\"sub_categories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.SubCategories {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Category) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson22b57fa5EncodeGithubComAjwallacemusicMusicalInstrumentsSearchApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Category) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson22b57fa5EncodeGithubComAjwallacemusicMusicalInstrumentsSearchApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Category) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b57fa5DecodeGithubComAjwallacemusicMusicalInstrumentsSearchApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Category) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b57fa5DecodeGithubComAjwallacemusicMusicalInstrumentsSearchApi3(l, v)
}
